#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

void Input(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	if (fopen("A.inp", "r")) {
		freopen("A.inp", "r", stdin);
		freopen("A.out", "w", stdout);
	}
}

void Solve(){
	int n, m; cin >> n >> m;
	vector<vector<ll>> A(n + 2, vector<ll>(m + 2, 1e18));
	vector<vector<ll>> dp(n + 2, vector<ll>(m + 2, 1e18));

	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++) {
			cin >> A[i][j];
			dp[i][j] = A[i][j];
		}

	for (int j = 2; j <= m; j++)
		for (int i = 1; i <= n; i++) 
			dp[i][j] += min({dp[i][j-1], dp[i+1][j-1], dp[i-1][j-1]});
		
	int c = m, r = 1;
	for (int i = 1; i <= n; i++)
		if (dp[r][c] > dp[i][c]) r = i;
	
	cout << dp[r][c] << "\n";
	vector<int> path;
	for (; c >= 0; c--) {
		if (c == 0) break;
		path.push_back(r);

		if (dp[r][c] == dp[r-1][c-1] + A[r][c]) r--;
		else if (dp[r][c] == dp[r][c-1] + A[r][c]) r = r;
		else r++;
	}
	reverse(path.begin(), path.end());
	for (auto &i: path) cout << i << " ";
}

int main(){
	Input();
	Solve();
	return 0;
}
